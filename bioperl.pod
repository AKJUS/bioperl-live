## $Id: bioperl.pod,v 1.17 2002-02-07 21:40:10 bosborne Exp $

## Should contain general info about the distribution including
## links to all the various modules.
##
## 'cookbook' type examples are probably better off being placed
## in the local embedded module PODs. This will make it easier for
## authors to update and maintain.

=head1 NAME

Bioperl - Coordinated OOP-Perl Modules for Biology

=head1 SYNOPSIS

Not very appropriate to put a synopsis  - many
different objects to use. Read on...

=head1 DESCRIPTION

Bioperl contains a number of Perl objects which are useful in biology.
Examples include Sequence objects, Alignment objects and database
searching objects. These objects not only do what they are advertised
to do in the documentation, but they also interact - Alignment
objects are made from the Sequence objects and so on. This means that
the objects provide a coordinated framework to do computational
biology.

Bioperl development is focused on the objects themselves, and less on the 
scripts or programs that put these objects together. There are some scripts
provided in the scripts/ and examples/ directories, but it is not the focus
of the objects that are distributed. Of course, as the objects do most of
the hard work for you, all you have to do is combine a number of objects
together sensibly to make useful scripts.

The intent of the Bioperl development effort is to make reusable tools
that aid people in creating their own sites or job-specific applications.

The bioperl.org website at http://bioperl.org also attempts to maintain 
links and archives of standalone bio-related perl tools that are not
affiliated or related to the core Bioperl effort. Check the site for
useful code ideas and contribute your own if possible.

We now also have a cookbook tutorial in bptutorial.pl which has
embedded documentation. Start there if learning-by-example suits you
most, or examine the Bioperl online course at
http://www.pasteur.fr/recherche/unites/sis/formation/bioperl.

=head1 INSTALLATION

The Bioperl modules are distributed as a tar file that expands into a
standard perl CPAN distribution.  Detailed installation directions 
can be found in the distribution README file.

The Bioperl modules can now interact with local flat file databases.
To learn how to set this up, look at the bioback.pod documentation
(perldoc bioback will work once it has been installed. Alternatively
go perldoc bioback.pod directly).

=head1 GETTING STARTED

A good place to start is by reading and running the cookbook script,
bptutorial.pl.

The distribution I<scripts/> directory has fully working, industrial
strength scripts for use with Bioperl. These are documented, and the
command 'perldoc I<scriptname>' will work. This area only started in the
0.05 distribution, and so not that many scripts have been written - you
are more than welcome to contribute!

The example scripts in the distribution I<examples/> directory and sub
directories therein give you an idea of how to use some of the modules
and driver code.

If you have installed Bioperl in the standard way, as detailed in the
README in the distribution, these examples should work by just running
them. If you have a not installed it in a standard way you will
have to change the 'use lib' to point to your installation.


=head1 Examples/ Directory

Here are brief descriptions of the scripts in the I<examples/> directory:

I<examples/aligntutorial.pl> - examples using EMBOSS, pSW, Clustalw,
TCoffee, and Blast to align sequences

I<examples/blast/*pl> - a set of scripts showing how to use
Bio::Tools::Blast

I<examples/change_gene.pl> - a script showing how to use LiveSeq::Mutator
and LiveSeq::Mutation

I<examples/clustalw.pl> - a demonstration of the various uses of
Bio::Tools::Run::Alignment::Clustalw

I<examples/getGenbank.pl> - retrieving Genbank entries over the Web using
Bio::DB::GenBank

I<examples/gsequence> - create a Protein Sequence Control Panel GUI with Gtk

I<examples/hitdisplay.pl> - create a GUI for displaying Blast results using
Bio::Tk::HitDisplay

I<examples/psw.pl> - example code for using the XS extensions for a protein
Smith-Waterman comparison.

I<examples/remote_blast.pl> - this script executes remote Blast using
Bio::Tools::Run::RemoteBlast

I<examples/restriction.pl> - example code for using the
Bio::Tools::RestrictionEnzyme.pm module

I<examples/rev_and_trans.pl> - examples using Bio::Seq.pm for reversing
and translating sequences

I<examples/root_object/*> - example code for using Bio::Root::Object.pm.

I<examples/run_genscan.pl> - run GENSCAN on multiple sequences and create
output sequence files using Bio::Tools::Genscan

I<examples/seq/*> - example code for working with multiple sequence files,
including formatting and filtering based on length or description or ID

I<examples/seq_pattern.pl> - a script that shows how to use sequences as
regular expressions using Bio::Tools::SeqPattern

I<examples/simplealign.pl> - a script that demonstrates some uses of 
Bio::AlignIO

I<examples/standaloneblast.pl> - a demonstration of some of the uses of
Bio::Tools::StandAloneBlast.pl

I<examples/state-machine.pl> - a demonstration of how to create a
state machine using Bio::Tools::StateMachine::AbstractStateMachine


=head1 Scripts/ Directory

Here are brief descriptions of the scripts in the I<scripts/> directory:

I<scripts/align_on_codons.pl>

I<scripts/bioperl.pl> - a Bioperl shell!

I<scripts/blast_fetch_local.pl> - parse a Blast results file for ids and
extract pertinent sequences from a local, indexed database using
Bio::Tools::BPlite and Bio::Index::Fasta

I<scripts/blast_fetch.pl> - parse a Blast result and fetch sequences from
Genbank or Genpept over the network using Bio::Tools::Blast and Bio::DB*

I<scripts/bpfetch.pl> - fetch sequences from local indexed database or over
the network and reformat using Bio::Index* and Bio::DB*

I<scripts/bpindex.pl> - indexes local databases, partners with bpfetch.pl

I<scripts/das/das_server> - sets up a minimal DAS annotation server, requires
Apache::DBI and Bio::DB::GFF

I<scripts/DB/dbfetch> - creates a Web page to query a local SRS server and
fetch sequences using 

I<scripts/est_tissue_query.pl> - fetch EST sequences from local files or
Genbank filtered by tissue using Bio::DB* or Bio::Index*

I<scripts/gb_to_gff.pl> - extracts top-level sequence features from Genbank-
formatted sequence files using Bio::Tools::GFF

I<scripts/generate_random_seq.pl> - writes random RNA, DNA, or protein
sequence of given length

I<scripts/get_seqs.pl> - fetches and formats sequences from GenBank, EMBL,
or SwissProt over the network using Bio::DB*

I<scripts/gff2ps.pl> - takes an input file in GFF format and draws its genes
and features as Postscript using Bio::Tools::GFF

I<scripts/make_mrna_protein.pl> - translate a cDNA or ORF to protein using
Bio::Seq's translate() method

I<scripts/make_primers.pl> - design PCR primers given a sequence and the 
positions of the start and stop codons in the sequence's ORF

I<scripts/prosite2perl.pl> - convert Prosite motifs to Perl regular
expressions

I<scripts/seqstats/aacomp.pl> - calculate amino acid composition of a 
protein using Bio::Tools::CodonTable and Bio::Tools::IUPAC

I<scripts/seqstats/chaos_plot.pl> - produce a chaos plot given a DNA
sequence using GD.pm

I<scripts/seqstats/gccalc.pl> - calculate %GC given a DNA sequence using
Bio::Tools::SeqStats

I<scripts/seqstats/oligo_count.pl> - calculates oligomer frequencies given
an oligomer length and a sequence

I<scripts/structure/nmrpdb_parse.pl> - extracts individual conformers
from an NMR-derived PDB file

I<scripts/subsequence.cgi> - CGI script to fetch a sequence from Genbank
and extract a subsequence using Bio:DB::GenBank

I<scripts/tree/paup2phylip.pl> - convert a PAUP tree block to Phylip format


=head1 GETTING INVOLVED

Bioperl is a completely open community of developers. We are not
funded and we don't have a mission statement. We encourage
collaborative code, in particular in Perl. You can help us in many
different ways, from just a simple statement about how you have used
Bioperl to doing something interesting to contributing a whole new object
hierarchy. See http://bioperl.org for more information. Here are
some ways of helping us:

=head2 Asking questions and telling us you used it

We are very interested to hear how you experienced using Bioperl. Did
it install cleanly? Did you understand the documentation? Could you
get the objects to do what you wanted it to do? If Bioperl was useless
we want to know why, and if it was great - that too. Post a message to
bioperl-l@bioperl.org, the Bioperl mailing list, where all the developers
are.

Only by getting people's feedback do we know whether we are providing
anything useful.

=head2 Writing a script that uses it

By writing a good script that uses Bioperl you both show that Bioperl
is useful and probably save someone elsewhere writing it. If you
contribute it to the 'script central' at http://bioperl.org then other
people can view and use it. Don't be nervous if you've never done this
sort of work, advice is freely given and all are welcome!

=head2 Find bugs!

We know that there are bugs in there. If you find something which you are
pretty sure is a problem, post a note to bioperl-bugs@bioperl.org and
we will get on it as soon as possible. You can also access the bug
system through the web pages.

=head2 Suggest new functionality

You can suggest areas where the objects are not ideally written and
could be done better. The best way is to find the main developer
of the module (each module was written principally by one person,
except for Seq.pm). Talk to him or her and suggest changes.

=head2 Make your own objects

If you can make a useful object we will happily include it into the
core. Probably you will want to read a lot of the documentation 
in the L<Bio::Root> section and also talk to people on the Bioperl
mailing list, bioperl-l@bioperl.org.

biodesign.pod provides documentation on the conventions and ideas
used in Bioperl. It is definitely worth a read if you are interested
in contributing.


=head1 ACKNOWLEDGEMENTS

Bioperl owes its early organizational support to its association with
the award-winning VSNS-BCD BioComputing Courses; some students of the
1996 course (Chris Dagdigian, Richard Resnick, Lew Gramer, Alessandro
Guffanti, and others) have contributed code and commentary. Georg
Fuellen, the VSNS-BCD chief organizer was one of the early driving forces
behind Bioperl. Steven Brenner, who was an early adopter of Perl for
bioinformatics provided some of the early work on Bioperl. Lincoln Stein
has long provided guidance and code.

Bioperl was then taken up by people developing code at the large
genome centres. In particular at Stanford, Steve Chervitz at the
Genome Sequencing Centre (St. Louis) Ian Korf and at the Sanger Centre
(Cambridge UK) Ewan Birney.  All of the C code XS extensions were
provided by Ewan Birney. Bioperl is used in anger at these sites,
indicating that is both useful and that it works.

Jason Stajich and Hilmar Lapp joined Bioperl for the drive towards a
0.7 release over 2000 and the first part of 2001, which includes a
revised feature location model, richer feature objects (in particular
genes) and more and better tools. Peter Schattner and Lorenz Pollak
contributed serious chunks of code, being the AlignIO and bptutorial
scripts and the BPLite port to Bioperl respectively. At this time
Bioperl was being used in absolute earnest by the Ensembl group which
shook out a number of problems in the code base. Additional
compatibility with the Sequence Workbench (Bioperl-gui, Mark
Wilkinson and David Block) and Biocorba (Jason Stajich, Brad Chapman
and Alan Robinson) and finally Game-XML (Brad Marshall) provided more
interoperability.

Current server hardware for bioperl.org (and other open-bio.org hosted
projects) was provided by Compaq Computer Corporation.  The donation 
was facilitated by both the Pharmaceutical Sales and High Performance 
Technical Computing (HPTC) groups.

The Bioperl servers reside in Cambridge, Massachusetts USA with
colocation facilities and Internet bandwidth donated by Genetics
Institute. In particular Dr. Steven Howes, Kenny Grant & 
Rich DiNunno have made significant efforts on our behalf.


=head1 COPYRIGHT

 Copyright (c) 1996-2000 Georg Fuellen, Richard Resnick, Steven E. Brenner,
 Chris Dagdigian, Steve Chervitz, Ewan Birney, James Gilbert, Elia Stupka, 
 and others. All Rights Reserved. This module is free software; 
 you can redistribute it and/or modify it under the same terms as Perl itself.

=cut

