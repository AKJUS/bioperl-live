<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "./docbookx.dtd"
  [ <!ENTITY % global.entities SYSTEM "./global.xml">
    %global.entities;

    <!ENTITY % entities SYSTEM "./entities.xml">
    %entities; ]
>
<article lang="en">

  <articleinfo>
    <title>Feature and Annotation HOWTO</title>
    <author>
      <firstname>Brian</firstname>
      <surname>Osborne</surname>
      <affiliation>
		  <!--		  <orgname></orgname> -->
		  <address>
			 <email>osborne1 at optonline.net</email>
        </address>
      </affiliation>
    </author>
    <pubdate>2003-10-14</pubdate>
    <!--
    <revhistory>
      <revision>
	<revnumber>1.0</revnumber>
	<date>2003/09/20</date>
	<authorinitials>BIO</authorinitials>
	<revremark></revremark>
      </revision>
    </revhistory>
    -->    
    <legalnotice>
      <para>
		  This document is copyright Brian Osborne, 2003. For
		  reproduction other than personal use please contact brian at 
		  optonline.net.
      </para>      
    </legalnotice>

    <abstract>      
      <para>
		  This is a HOWTO written in DocBook format that explains how to
		  use the SeqFeature and Annotation objects of Bioperl. 
      </para>
    </abstract>
  </articleinfo>

  <section id="introduction">
    <title>Introduction</title>
    <para>
      There's no more central notion in bioinformatics than the idea that
      portions of protein or nucleotide sequence have specific
      characteristics. A given stretch of DNA may have been found
      to be essential for the proper transcriptional regulation of a
      gene, or a particular amino acid sequence may bind a particular
      ion. This simple idea turns out to be a bit more complicated
      in the bioinformatics world where there's a need to represent the actual
      data in all its varied forms. The promoter region may not be precisely
      defined down to the base pair, a transcribed region may be divided into
      discontinuous exons, a gene may have different numbered positions on
      different maps, a sequence may have a sub-sequence which itself
      possesses some characteristic, an experimental observation may be
      associated with a literature reference, and so on. 
	 </para>
	 <para>
		This HOWTO describes aspects of Bioperl's approach. The problem is how to
      create software that accepts, analyzes, and displays any and all of
      this sequence annotation with the required attention to detail
      yet remains flexible and easy to use. The general names for the
      modules or objects that serve these purposes in Bioperl are
      SeqFeature and Annotation.
    </para>
    <para>
      The HOWTO will discuss these objects and the differences
      between them. There's also discussion of how to get useful data from these
      objects and discuss the basics of how to annotate sequence
      using the objects. 
    </para>
  </section>

  <section id="basics">
    <title>The Basics</title>
    <para>
      Some Bioperl neophytes may also be new to object-oriented
      programming (OOP) and this notion of an object. OOP is not the
      subject of this HOWTO but there should be some discussion of
		how objects are used in Bioperl. In the Bioperl world parsing a
      Genbank file doesn't give you data, it gives you an object and you
      can ask the object, a kind of variable, for data. While 
      annotating you don't create a
      file or database entry directly. You might create a "sequence
      object" and an "annotation object", then put these two
      together to create an "annotated sequence object". You could then tell
      this object to make a version of itself as a file, or pass this
      object to a "database object" for entry. This is a very flexible and
      logical way to design a complex piece of software like Bioperl, 
      since each part of the system can be created and evaluated separately. 
    </para>
    <para>
      A central idea in OOP is inheritance,
      which means that a child object can derive some of its 
      capabilities or functionality from a parent object. The OOP 
		approach also allows new modules to 
      modify or add functionality, distinct from the parent. Practically
      speaking this means that there's not one definitive SeqFeature
      or Annotation object but many, each a variation on a theme. The
      details of the these varieties will be discussed in other 
      sections, but for now
      we could use some broad definitions that apply to all the variations. 
    </para>
    <para>
      A SeqFeature object is designed to be associated with a 
      sequence, and can have
      a location on that sequence - it's a way of describing the
      characteristics of a specific part of a sequence. SeqFeature objects 
      can also have features themselves, which you
      could call sub-features but which, in fact, are complete
      SeqFeature objects. SeqFeature objects can also have one or more
      Annotations associated with them.
    </para>
    <para>
      An Annotation object is also associated with a sequence
      as you'd expect but it does not have a location on the sequence, it's
      associated with an entire sequence. This is one of the
      important differences between a SeqFeature and an
      Annotation. Annotations also can't have SeqFeatures, which makes
      sense since SeqFeature objects typically have locations. The relative
      simplicity of the Annotation has made it
      amenable to the creation of a useful set of Annotation objects,
      each devoted to a particular kind of fact or observation.
    </para>
    <para>
      Locations were discussed, above. Describing locations can be
      complicated in certain situations, say when some feature is
      located on different sequences with varying degrees of
      precision. One location could also be shared
      between disparate objects, such as two different kinds of 
      SeqFeatures. You may also want to describe a feature with many
      locations, like a repeated sequence motif in a protein. Because of
      these sorts of complexities and because
      one may want to create different types of locations the Bioperl 
      authors elected to keep location functionality inside dedicated 
      Location objects.
    </para>
    <para>
      SeqFeatures and Annotations will make the most sense if you're
      already somewhat familiar with Bioperl and its central Seq
      and SeqIO objects. The reader is referred to the 
      <ulink url="http://bioperl.org/Core/Latest/bptutorial.html"><citetitle>bptutorial</citetitle></ulink>, 
      the module documentation, and the 
      <ulink url="http://bioperl.org/HOWTOs/html/SeqIO.html"><citetitle>SeqIO HOWTO</citetitle></ulink> 
      for more information on these topics. Here's a bit of code, to summarize:
    </para>
    <para>
      <programlisting>
	# BAB55667.gb is a Genbank file, and Bioperl knows that it
        # is a Genbank file because of the '.gb' file suffix
	use Bio::SeqIO;
	
	my $seqio_object = Bio::SeqIO->new(-file => "BAB55667.gb" );
	my $seq_object = $seqio_object->next_seq;
      </programlisting>
    </para>
	 <para></para>
    <note>
      <para>
	This object, $seq_object, is actually a 
	<ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Seq/RichSeq.html"><citetitle>Bio::Seq::RichSeq</citetitle></ulink> 
	object - can a 
	<ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/PrimarySeq.html"><citetitle>PrimarySeq</citetitle></ulink> object, the simple parent of all Sequence objects, 
	have a feature or an annotation? No. 
      </para>
    </note>
    
    <para>
    </para>
    <para>
      Now that we have a sequence object in hand we can examine its 
      features and annotations.
    </para>
  </section>

  <section id="feat_from_genbank">
    <title>Features from Genbank</title>
    <para>
      I'll be focusing on the Genbank format but bear in mind
      that most of the code shown here will also work on other formats
      containing features or annotations (EMBL, Swissprot, BSML,
      Chado XML, GAME, KEGG, Locuslink, TIGR XML). 
      When the entry comes from Genbank it's 
      easy to see where most of the
      features are, they're in the Feature table section, something
      like this:
    </para>
    <para>
      <programlisting>
FEATURES             Location/Qualifiers
     source          1..1846
                     /organism="Homo sapiens"
                     /db_xref="taxon:9606"
                     /chromosome="X"
                     /map="Xp11.4"
     gene            1..1846
                     /gene="NDP"
                     /note="ND"
                     /db_xref="LocusID:4693"
                     /db_xref="MIM:310600"
     CDS             409..810
                     /gene="NDP"
                     /note="Norrie disease (norrin)"
                     /codon_start=1
                     /product="Norrie disease protein"
                     /protein_id="NP_000257.1"
                     /db_xref="GI:4557789"
                     /db_xref="LocusID:4693"
                     /db_xref="MIM:310600"
                     /translation="MRKHVLAASFSMLSLLVIMGDTDSKTDSSFIMDSDPRRCMRHHY
                     VDSISHPLYKCSSKMVLLARCEGHCSQASRSEPLVSFSTVLKQPFRSSCHCCRPQTSK
                     LKALRLRCSGGMRLTATYRYILSCHCEECNS"
      </programlisting>
    </para>
    <para>
      Features in Bioperl are accessed using their tags, either a
      "primary tag" or a plain "tag". Examples of primary tags and
      tags in this Genbank entry are shown below. You can see that
		in this case the primary tag is a means to access the tags
		and it's the tags that are associated with the data from 
		the file.
	 </para>
	 <para></para>
    <para>
      <table>
		  <title>Tag Examples</title>
		  <tgroup cols="3">
			 <thead>
				<row><entry>Tag name</entry><entry>Tag type</entry>
				<entry>Tag value</entry></row>  
			 </thead>
			 <tbody>
				<row>
				  <entry>source</entry><entry>primary tag</entry><entry></entry>
				</row>
				<row>
				  <entry>CDS</entry><entry>primary tag</entry><entry></entry>
				</row>
				<row>
				  <entry>gene</entry><entry>primary tag</entry><entry></entry>
				</row>
				<row>
				  <entry>organism</entry><entry>tag</entry><entry>Homo sapiens</entry>
				</row>
				<row>
				  <entry>note</entry><entry>tag</entry><entry>ND</entry>
				</row>
				<row>
				  <entry>protein_id</entry><entry>tag</entry><entry>NP_000257.1</entry>
				</row>
				<row>
				  <entry>translation</entry><entry>tag</entry><entry>MRKHVL...HCEECNS</entry>
				</row>
			 </tbody>
		  </tgroup>
      </table>
    </para>
	 

    <para>
      When a Genbank file like the one above is parsed the
      feature data is converted into objects, specifically 
      <ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Generic.html"><citetitle>Bio::SeqFeature::Generic</citetitle></ulink> objects. How many? In this 
      case 3, one for each of the primary tags.
    </para>
    <para>
      In other parts of
      the Bioperl documentation one finds discussions
      of the "SeqFeature object", but there's more
      than one kind of these, as we'll see later, so what is this a 
		reference to? More
      than likely it's referring to this same 
      <ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Generic.html"><citetitle>Bio::SeqFeature::Generic</citetitle></ulink>
      object. Think of it as the default SeqFeature object. Now,
      should you care what kind of object is being made? For the most 
      part no, you can write lots of useful and powerful Bioperl code
      without ever knowing these specific details.
    </para>
    <tip>
      <para>
		  By the way, how does one know what kind of object one has in hand? Try
		  something like:
		  <programlisting>
	  print ref($seq_object);
	  # results in "Bio::Seq::RichSeq"
		  </programlisting>
      </para>
    </tip>
    <para>
    </para>
    <para>
      The SeqFeature::Generic object uses tag/value pairs to store information,
      and the values are always returned as arrays. A simple
      way to access all the data in the features of a Seq object would
      look something like this: 
      <programlisting>
	for my $feat_object ($seq_object->get_SeqFeatures) {
	   print "primary tag: ", $feat_object->primary_tag, "\n";
	   for my $tag ($feat_object->get_all_tags) {
	      print "  tag: ", $tag, "\n";
	      for my $value ($feat_object->get_tag_values($tag)) {
	         print "    value: ", $value, "\n";
	      }
	   }
	}
      </programlisting>
    </para>
	 <para></para>
	 <para>
      This bit would print out something like:
      <programlisting>
primary tag: source
  tag: chromosome
    value: X
  tag: db_xref
    value: taxon:9606
  tag: map
    value: Xp11.4
  tag: organism
    value: Homo sapiens
primary tag: gene
  tag: gene
    value: NDP
  tag: note
    value: ND
primary tag: CDS
  tag: codon_start
    value: 1
  tag: db_xref
    value: GI:4557789
    value: LocusID:4693
    value: MIM:310600
  tag: product
    value: Norrie disease protein
  tag: protein_id
    value: NP_000257.1
  tag: translation
    value: MRKHVLAASFSMLSLLVIMGDTDSKTDSSFIMDSDPRRCMRHHYVDSI
           SHPLYKCSSKMVLLARCEGHCSQASRSEPLVSFSTVLKQPFRSSCHCC
           RPQTSKLKALRLRCSGGMRLTATYRYILSCHCEECNS
      </programlisting>
    </para>
    <para>
    </para>
    <para>
    So to retrieve specific values, like all the database identifiers, 
    you could do:
    </para>
    <para>
    <programlisting>
      for my $feat_object ($seq_object->get_SeqFeatures) {
         push @ids,$feat_object->get_tag_values("db_xref") 
              if ($feat_object->has_tag("db_xref"));
      }
    </programlisting>
    </para>
    <para>
    </para>
    <important><para>
      Make sure to include that <emphasis>if ($feat_object->has_tag("&lt;tag&gt;"))</emphasis>
      part, otherwise you'll get errors when the feature does not
      have the tag you're requesting.
    </para></important>
    <para>
    </para>
    <para>
      One last note on Genbank features. The Bioperl parsers for
		Genbank and EMBL are
      built to respect the specification for the feature tables agreed
      upon by Genbank, EMBL, and DDBJ (see <ulink 
		  url="http://www.ncbi.nlm.nih.gov/projects/collab/FT/"><citetitle>Feature
		  Table Definition</citetitle></ulink> for the details). Check this page if
      you're interested in a complete listing and description of all the 
      Genbank, EMBL, and DDBJ feature tags.
    </para>
    <para>
      Despite this specification some non-standard feature tags
      have crept into Genbank, like "bond". When the Bioperl Genbank 
      parser encounters a non-standard
      feature like this it's going to throw a fatal exception. The 
      work-around is to use <function>eval{}</function> so your 
      script doesn't die, something like:
    </para>
    <para>
      <programlisting>
	use Bio::SeqIO;
	
	my $seq_object;
	my $seqio_object = Bio::SeqIO->new(-file   => $gb_file,
                                           -format => "genbank");
	eval { $seq_object = $seqio_object->next_seq; };
	# if there's an error
        print "Problem in $gb_file. Bad feature perhaps?\n" if $@;
      </programlisting>
    </para>  
  </section>

  <section id="sequences">
    <title>Getting Sequences</title>
    <para>
      One commonly asked question is "How do I get the sequence of a
      SeqFeature?" The answer is "It depends on what you're looking
      for." If you'd like the sequence of the parent, the sequence
      object that the SeqFeature is associated with, then use 
      <function>entire_seq()</function>:
    </para>
    <para>
      <programlisting>
	$seq_object = $feat_object->entire_seq;
      </programlisting>
    </para>
    <para>
      This doesn't return the parent's sequence directly but rather
      a <ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/PrimarySeq.html"><citetitle>Bio::PrimarySeq</citetitle></ulink> object corresponding to the parent
      sequence. Now that you have this object you can call its
      <function>seq()</function> method to get the sequence string, or
      you could do this all in one step:      
    </para>
    <para>
      <programlisting>
	my $sequence_string = $feat_object->entire_seq->seq;
      </programlisting>
    </para>
	 <para></para>
    <para>
      There are 2 other useful methods, <function>seq()</function> and
      <function>spliced_seq()</function>. Consider the following
      Genbank example:
    </para>
    <para>
      <programlisting>
FEATURES             Location/Qualifiers
     source          1..177
                     /organism="Mus musculus"
                     /mol_type="genomic DNA"
                     /db_xref="taxon:10090"
     tRNA            join(103..111,121..157)
                     /gene="Phe-tRNA"
      </programlisting>
    </para>
    <para>
      To get the sequence string from the start to the end of the tRNA
      feature use <function>seq()</function>. To get the spliced
      sequence string, accounting for the start and end locations of 
      each sub-sequence, use <function>spliced_seq()</function>. Here
      are the methods and the corresponding example coordinates:
    </para>

    <para>
      <table>
		  <title>Sequence retrieval methods</title>
		  <tgroup cols="2">
			 <thead>
				<row><entry>Method</entry><entry>Coordinates</entry></row>  
			 </thead>
			 <tbody>
				<row>
				  <entry>entire_seq()</entry><entry>1..177</entry>
				</row>
				<row>
				  <entry>seq()</entry><entry>103..157</entry>
				</row>
				<row>
				  <entry>spliced_seq()</entry><entry>103..111,121..157</entry>
				</row>
			 </tbody>
		  </tgroup>
      </table>
    </para>

    <para>
      It's not unusual for a Genbank file to have multiple CDS or gene
      features (and recall that 'CDS' and 'gene' are common primary tags
      in Genbank format), each with a number of tags, like 'note', 
		'protein_id',
      or 'product'. How can we get, say, the nucleotide sequences and gene
      names from all these CDS features? By putting all of this together we
      arrive at something like:
    </para>
    <para>
      <programlisting>
        use Bio::SeqIO;

	my $seqio_object = Bio::SeqIO->new(-file => $gb_file);
        my $seq_object = $seqio_object->next_seq;

	for my $feat_object ($seq_object->get_SeqFeatures) {
	  if ($feat_object->primary_tag eq "CDS") {
	    print $feat_object->spliced_seq->seq,"\n";
	# e.g. 'ATTATTTTCGCTCGCTTCTCGCGCTTTTTGAGATAAGGTCGCGT...'
	    if ($feat->has_tag('gene')) {
	      for my $val ($feat->get_tag_values('gene')){
	        print "gene: ",$val,"\n";
	# e.g. 'NDP', from a line like '/gene="NDP"'
	      }
            }
          }
        }	
      </programlisting> 
    </para>
    <para>
    </para>
  </section>

  <section id="compact-code">
	 <title>Compact Code</title>
    <para>
      Many people wouldn't write code in the rather deliberate style
       used above. The following is more compact code
      that gets all the features with a primary tag of 'CDS',
      starting with a Genbank file:
    </para>
    <para>
      <programlisting>
	my @cds_features = grep { $_->primary_tag eq 'CDS' }
	Bio::SeqIO->new(-file => $gb_file)->next_seq->get_SeqFeatures;
      </programlisting>
    </para>
    <para>
      With this array of SeqFeatures you could do all sorts of
      useful things, such as find all the values for
      the 'gene' tags and their corresponding spliced nucleotide
      sequences and store them in a hash:
    </para>
    <para>
      <programlisting>
	my %gene_sequences = map {$_->get_tag_values('gene'),
	                          $_->spliced_seq->seq } @cds_features;
      </programlisting>
    </para>
    <para>
      Because you're asking for a specific primary tag and tag, 'CDS'
      and 'gene' respectively, this code would only work when there are 
      features that looked something like this:
    </para>
    <para>
      <programlisting>
     CDS             735..1829
                     /gene="MG001"
                     /codon_start=1
                     /product="DNA polymerase III, subunit beta (dnaN)"
                     /protein_id="AAC71217.1"
                     /translation="MNNVIISNNKIKPHHSYFLIEAKEKEINFYANNEYFSVKCNLNK
                     NIDILEQGSLIVKGKIFNDLINGIKEEIITIQEKDQTLLVKTKKTSINLNTINVNEFP
                     RIRFNEKNDLSEFNQFKINYSLLVKGIKKIFHSVSNNREISSKFNGVNFNGSNGKEIF
                     LEASDTYKLSVFEIKQETEPFDFILESNLLSFINSFNPEEDKSIVFYYRKDNKDSFST
                     EMLISMDNFMISYTSVNEKFPEVNYFFEFEPETKIVVQKNELKDALQRIQTLAQNERT
                     FLCDMQINSSELKIRAIVNNIGNSLEEISCLKFEGYKLNISFNPSSLLDHIESFESNE
                     INFDFQGNSKYFLITSKSEPELKQILVPSR"
      </programlisting>
    </para>
  </section>
 
  <section id="location">
    <title>Location Objects</title>
    <para>
      There's quite a bit to this idea of location, so much that it
      probably deserves its own HOWTO. This is my way of saying that
      if this topic interests you should take a closer look at the modules that
      are concerned with both Location and Range. Together these modules
      offer the user a number of useful methods to handle both 
      exact and "fuzzy"
      locations, where the "start" and "end" of a particular
      sub-sequence are precise or themselves have start and end 
      positions, or are
      not precisely defined. You'll also find methods like 
      <function>union()</function> and
      <function>intersection()</function> that act on pairs of
      ranges. The table below is
      meant to illustrate some of the modules' capabilities.
    </para>
    <table>
	<title>Location Examples</title>
	<tgroup cols="2">
	  <thead>
	    <row><entry>Type</entry><entry>Example</entry></row>
	  </thead>
		  <tbody>
			 <row><entry>EXACT</entry><entry>(5..100)</entry></row>
			 <row><entry>BEFORE</entry><entry>(&lt;5..100)</entry></row>
			 <row><entry>AFTER</entry><entry>(&gt;5..100)</entry></row>
			 <row><entry>WITHIN</entry><entry>((5.10)..100)</entry></row>
			 <row><entry>BETWEEN</entry><entry>(99^100)</entry></row>
			 <row><entry>UNCERTAIN</entry><entry>(99.?100)</entry></row>
		  </tbody>
		</tgroup>
	 </table>
    <para>
      One type that might not be self-explanatory is 'WITHIN'. The
      example means "starting somewhere between positions 5 and 10,
      inclusive, and ending at 100". 'BETWEEN' is interesting - the
      example means "between 99 and 100, exclusive". A biological example
      of such a location would be a cleavage site, between two bases
      or residues, but not including them.
    </para>
	 <para>
		The UNCERTAIN attribute means what it says, not known. This
		value is found in SwissProt features.
	 </para>
    <para>
      In their simplest form the Location objects are used to get or
      set start and end positions, getting the positions could
      look like this:
    </para>
    <para>
      <programlisting>
	# polyA_signal    1811..1815
        #                 /gene="NDP"
	my $start = $feat_object->location->start;
	my $end = $feat_object->location->end;
         </programlisting>
    </para>
    <para>
      By now you've figured out that the <function>location()</function> method returns
      a Location object - this object has <function>end()</function> and 
      <function>start()</function> methods.
    </para>
    <para>
      Another way of describing a feature in Genbank involves
      multiple start and end positions. These could be called "split"
      locations, and a very common example is the join statement in the
      CDS feature found in Genbank entries
      (e.g. "join(45..122,233..267)"). This calls for a specialized
      object, SplitLocation, which is a container for Location objects:
    </para>
    <para>
      <programlisting>
       for my $feature ($seqobj->top_SeqFeatures){
         if ( $feature->location->isa('Bio::Location::SplitLocationI')
                        &amp;&amp; $feature->primary_tag eq 'CDS' )  {
           for my $location ( $feature->location->sub_Location ) {
             print $location->start . ".." . $location->end . "\n";
           }
         }
       }
      </programlisting>
    </para>
  </section>

  <section id="other_objects">
    <title>Other objects</title>
    <para>
      As an aside I should mention that certain data
      associated in a Genbank file is accessible both 
      as a feature and through a specialized object. Taxonomic 
      information on a sequence, below, can be accessed 
      through a Species object as well as a value to the "organism"
      tag, and you'll get more information from the 
      <ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Species.html"><citetitle>Bio::Species object</citetitle></ulink>.
    </para>
    <para>
      <programlisting>
SOURCE      human.
  ORGANISM  Homo sapiens
            Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi;
            Mammalia; Eutheria; Primates; Catarrhini; Hominidae; Homo.
      </programlisting>
    </para>
    <para>
      You can create this Species object and use its methods or you can
      use the Perlish shorthand:
    </para>
    <para>
      <programlisting>
	# legible and long
	my $species_object = $seq_object->species;
	my $species_string = $species_object->species;
	
   # Perlish
	my $species_string = $seq_object->species->species;
	# either way $species_string is "Homo sapiens"
	
   # get all taxa from the ORGANISM section in an array
   my @classification = $seq_object->species->classification;
	# "sapiens Homo Hominidae Catarrhini Primates Eutheria Mammalia
	# Euteleostomi Vertebrata Craniata Chordata Metazoa Eukaryota"
      </programlisting>
    </para>
    <para>
      The reason that ORGANISM isn't treated only as a plain tag is that
      there are a variety of things one would want to do with
      taxonomic information, so returning just an array wouldn't
      suffice. See the documentation on
      <ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Species.html"><citetitle>Bio::Species</citetitle></ulink> for more information.
    </para>
  </section>

  <section id="anno_from_genbank">
    <title>Annotations from Genbank</title>
    <para>
      There's still quite a bit of data left in our Genbank files that's
      not in SeqFeature objects, and much of it is parsed into 
		Annotation objects. Annotations, if you recall, are those values
		that are assigned to a sequence that have no specific location
		on that sequence.
      In order to get access to these objects we can get an
      AnnotationCollection object, which is exactly what it sounds like:
    </para>
	 <para></para>
    <para>
      <programlisting>
	my $io = Bio::SeqIO->new(-file => $file, -format => "genbank" );
	my $seq_obj = $io->next_seq;
	my $anno_collection = $seq_obj->annotation;
      </programlisting>
    </para>
	 <para></para>
    <para>
      Now we can access each Annotation in the AnnotationCollection
      object. The Annotation objects can be retrieved in arrays: 
    </para>
	 <para></para>
    <para>
      <programlisting>
	for my $key ( $anno_collection->get_all_annotation_keys ) {
	  my @annotations = $anno_collection->get_Annotations($key);
	  for my $value ( @annotations ) {
	    print "tagname : ", $value->tagname, "\n";
	    # $value is an Bio::Annotation, and has an "as_text" method
	    print "  annotation value: ", $value->as_text, "\n";
	  }
	}
      </programlisting>
    </para>
	 <para></para>
    <para>
      It turns out the value of <varname>$key</varname>, above, and 
      $value->tagname are the same. The code will print something like:
    </para>
    <para>
      <programlisting>
tagname : comment
  annotation value: Comment: REVIEWED REFSEQ: This record has been curated by
NCBI staff. The reference sequence was derived from X65882.1. Summary: NDP is the
genetic locus identified as harboring mutations that result in Norrie disease.
tagname : reference
  annotation value: Reference: The molecular biology of Norrie's disease
tagname : date_changed
  annotation value: Value: 31-OCT-2000
      </programlisting>
    </para>
	 <para></para>
    <para>
      If you only wanted a specific annotation, like COMMENT, you
      could do:
    </para>
    <para>
      <programlisting>
	my @annotations = $anno_collection->get_Annotations('comment');
      </programlisting>
    </para>
    <para>
      And if you'd simply like all of the Annotations, regardless of
      key, you can do this:
    </para>
    <para>
      <programlisting>
	my @annotations = $anno_collection->get_Annotations();
      </programlisting>
    </para>
    <para>
      The following is a list of some of the common Annotations, their
      keys in Bioperl, and what they're derived from in Genbank files: 
    </para>
    <para>
      <table>
		  <title>Genbank Annotations</title>
		  <tgroup cols="4">
			 <thead>
				<row><entry>Genbank Text</entry><entry>Key</entry><entry>Object Type</entry><entry>Note</entry></row>  
			 </thead>
			 <tbody>
				<row>
				  <entry>COMMENT</entry><entry>comment</entry><entry><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/Comment.html"><citetitle>Comment</citetitle></ulink></entry><entry></entry>
				</row>
				<row>
				  <entry>SEGMENT</entry><entry>segment</entry><entry><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/SimpleValue.html"><citetitle>SimpleValue</citetitle></ulink></entry><entry>e.g.
					 "1 of 2"</entry>
				</row>
				<row>
				  <entry>ORIGIN</entry><entry>origin</entry><entry><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/SimpleValue.html"><citetitle>SimpleValue</citetitle></ulink></entry><entry>e.g.
					 "X Chromosome."</entry>
				</row>
				<row>
				  <entry>REFERENCE</entry><entry>reference</entry><entry><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/Reference.html"><citetitle>Reference</citetitle></ulink></entry><entry></entry>
				</row>
				<row>
				  <entry>INV</entry><entry>date_changed</entry><entry><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/SimpleValue.html"><citetitle>SimpleValue</citetitle></ulink></entry><entry>e.g.
					 "08-JUL-1994"</entry>
				</row>
				<row>
				  <entry>KEYWORDS</entry><entry>keyword</entry><entry><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/SimpleValue.html"><citetitle>SimpleValue</citetitle></ulink></entry><entry></entry>
				</row>
				<row>
				  <entry>ACCESSION</entry><entry>secondary_accession</entry><entry><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/SimpleValue.html"><citetitle>SimpleValue</citetitle></ulink></entry><entry>2nd
					 of 2 accessions</entry>
				</row>
				<row>
				  <entry>DBSOURCE</entry><entry>dblink</entry><entry><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/DBLink.html"><citetitle>DBLink</citetitle></ulink></entry><entry>Link
				  to entry in a database</entry>
				</row>
			 </tbody>
		  </tgroup>
      </table>
    </para>
    <para>
      Some Annotation objects, like Reference, make use of a
      <function>hash_tree()</function> method, which returns a hash 
      reference. This is a more thorough way to look at the actual
      values than the <function>as_text()</function> 
      method used above. For example, <function>as_text()</function>
      for a Reference object is only going to return the title of the 
      reference, whereas the keys of the hash from
      <function>hash_tree()</function> will be "title", "authors",
      "location", "medline", "start", and "end".
    </para>
    <para>
    <programlisting>
	if ($value->tagname eq "reference") {
	  my $hash_ref = $value->hash_tree;
	  for my $key (keys %{$hash_ref}) {
	    print $key,": ",$hash_ref->{$key},"\n";
	  }
	}
      </programlisting>
    </para>
	 <para></para>
    <para>
      Which yields:
    </para>
    <para>
    <programlisting>
authors: Meitinger,T., Meindl,A., Bork,P., Rost,B., Sander,C., Haasemann,M. and
Murken,J.
location: Nat. Genet. 5 (4), 376-380 (1993)
medline: 94129616
title: Molecular modelling of the Norrie disease protein predicts a cystine knot
 growth factor tertiary structure
end: 1846
start: 1
    </programlisting>
    </para>
    <para>
      Other Annotation objects, like SimpleValue, also have a
      <function>hash_tree()</function> method but the hash isn't
      populated with data and <function>as_text()</function> will suffice.
    </para>
    <para>
      The simplest bits of Genbank text, like KEYWORDS, end up in these
      Annotation::SimpleValue objects, the COMMENT ends up in a
      <ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/Comment.html"><citetitle>Bio::Annotation::Comment</citetitle></ulink> object, and 
      references are tranformed into
      <ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/Reference.html"><citetitle>Bio::Annotation::Reference</citetitle></ulink> objects. Some of 
      these specialized objects will have specialized methods. Take the 
      Annotation::Reference object, for example:
    </para>
	 <para></para>
    <para>
      <programlisting>
	if ($value->tagname eq "reference") {
	  print "author: ",$value->authors(), "\n";
	}
      </programlisting>
    </para>
	 <para></para>
    <para>
      There's also <function>title()</function>, 
      <function>publisher()</function>, 
      <function>medline()</function>, <function>editors()</function>,
      <function>database()</function>, <function>pubmed()</function> 
      and a number of other methods.
    </para>
  </section>

  <section id="direct">
    <title>Directly from the Sequence object</title>
    <para>
      This is just a reminder that some of the "annotation" data 
      in your sequence
      files can be accessed directly, without looking at SeqFeatures or
      Annotations. For example, if the Sequence object in hand is 
      a Seq::RichSeq
      object then here are some useful methods:
    </para>
    <para>
      <table>
	<title>RichSeq methods</title>
	<tgroup cols="2">
	  <thead>
	    <row><entry>Method</entry><entry>Returns</entry></row>  
	  </thead>
	  <tbody>
	    <row>
	      <entry>get_secondary_accessions</entry><entry>array</entry>
	    </row>
	    <row>
	      <entry>keywords</entry><entry>array</entry>
	    </row>
	    <row>
	      <entry>get_dates</entry><entry>array</entry>
	    </row>
	    <row>
	      <entry>seq_version</entry><entry>string</entry>
	    </row>
	    <row>
	      <entry>pid</entry><entry>string</entry>
	    </row>
	    <row>
	      <entry>division</entry><entry>string</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </para>
    <para>
      These <ulink
	url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Seq/RichSeq.html"><citetitle>Bio::Seq::RichSeq</citetitle></ulink> objects are created 
      automatically when you use SeqIO to read from EMBL, GenBank, GAME,
      Chado XML, TIGR XML, Locuslink, BSML, KEGG, Entrez Gene, and SwissProt sequence
      files. However, it's not guaranteed that each of these
      formats will supply data for all of the methods above.
    </para>
  </section>  

  <section id="other_formats">
    <title>Other sequence file formats</title>
    <para>
      It is worth mentioning other sequence file formats. The table 
      below shows what sorts of objects, Annotation or 
      SeqFeature, you'll get when you parse other sequence formats
		using Bio::SeqIO. 
    </para>
    <para>
      <table>
		  <title>Formats, SeqFeatures, and Annotations</title>
		  <tgroup cols="4">
			 <thead>
				<row><entry>Format</entry><entry>SeqIO name</entry>
				  <entry>SeqFeature</entry><entry>Annotation</entry></row>  
			 </thead>
			 <tbody>
				<row><entry>Genbank</entry><entry>embl</entry><entry>yes</entry>
				  <entry>yes</entry></row>
				<row><entry>EMBL</entry><entry>genbank</entry><entry>yes</entry>
				  <entry>yes</entry></row>
				<row><entry>GAME</entry><entry>game</entry><entry>yes</entry>
				  <entry>no</entry></row>
				<row><entry>Chado XML</entry><entry>chadoxml</entry>
				  <entry>yes</entry><entry>yes</entry></row>
				<row><entry>TIGR XML</entry><entry>tigr</entry><entry>yes</entry>
				  <entry>yes</entry></row>
				<row><entry>Locuslink</entry><entry>locuslink</entry>
				  <entry>no</entry><entry>yes</entry></row>
				<row><entry>BSML</entry><entry>bsml</entry><entry>yes</entry>
				  <entry>yes</entry></row>
				<row><entry>KEGG</entry><entry>kegg</entry><entry>yes</entry>
				  <entry>yes</entry></row>
				<row><entry>SwissProt</entry><entry>swiss</entry><entry>yes</entry>
				  <entry>yes</entry></row>
				<row><entry>Entrez Gene</entry><entry>entrezgene</entry>
				  <entry>no</entry><entry>yes</entry></row>
			 </tbody>
		  </tgroup>
      </table>
    </para>
    <para>
      How does one find out what data is in which object in these
      formats? In general the individual module documentation is not
      going to provide all the answers, you'll need to do some
      investigation yourself. Let's use an approach we used earlier
      to dissect a Locuslink entry in a file, "148.ll". Here's the file:     
    </para>
    <para>
      <programlisting>
LOCUSID: 148
LOCUS_CONFIRMED: yes
LOCUS_TYPE: gene with protein product, function known or inferred
ORGANISM: Homo sapiens
STATUS: REVIEWED
NM: NM_000680|4501960|na
NP: NP_000671|4501961
PROT: AAA93114|409029
ACCNUM: M11313|177869|na|na|na
TYPE: p
PROT: P35348|1168246
OFFICIAL_SYMBOL: ADRA1A
OFFICIAL_GENE_NAME: adrenergic, alpha-1A-, receptor
ALIAS_SYMBOL: ADRA1C
SUMMARY: Summary: Alpha-1-ARs are members of the GPCR superfamily. 
CHR: 8
STS: SGC35557|8|8124|na|seq_map|epcr
COMP: 10090|Adra1a|14|14  cM|11549|8|ADRA1A|ncbi_mgd
ALIAS_PROT: adrenergic, alpha-1C-, receptor
BUTTON: unigene.gif
LINK: http://www.ncbi.nlm.nih.gov/UniGene/clust.cgi?ORG=Hs&amp;CID=52931
UNIGENE: Hs.52931
OMIM: 104221
MAP: 8p21-p11.2|RefSeq|C|
MAPLINK: default_human_gene|ADRA1A
GO: cellular component|integral to plasma membrane|P|GO:0005887|Proteome|8396931
      </programlisting>
    </para>
	 <para></para>
    <para>
      First collect all the annotations:
    </para>
    <para>
      <programlisting>
use Bio::SeqIO;

my @annotations = Bio::SeqIO->new(-file => "148.ll", -format => "locuslink")->
	       next_seq->annotation->get_Annotations;
      </programlisting>
    </para>
	 <para></para>
    <para>
      And from this array of Annotations let's extract a hash containing 
      the <function>as_text</function> strings as keys and
      the concatenated tagnames and object types as values:
    </para>
    <para>
      <programlisting>
	my %tagname_type = map {$_->as_text,($_->tagname . " " . ref($_)) } 
		  @annotations;
      </programlisting>
    </para>
	 <para></para>
    <para>
      The contents of the <varname>%tagname_type</varname> hash will 
      look like the table below.
    </para>

    <para>
      <table>
		  <title>Locuslink Annotations</title>
		  <tgroup cols="3">
			 <thead>
				<row><entry>as_text()</entry><entry>tagname()</entry>
				  <entry>ref()</entry></row>  
			 </thead>
			 <tbody>
				<row><entry>Direct database link to AAA93114 in database GenBank</entry><entry>dblink</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/DBLink.html"><citetitle>Bio::Annotation::DBLink</citetitle></ulink></entry></row>
<row><entry>Value:
	    http://www.ncbi.nlm.nih.gov/UniGene/clust.cgi?ORG=Hs&amp;CID=52931</entry><entry>URL</entry><entry>
<ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/SimpleValue.html"><citetitle>Bio::Annotation::SimpleValue</citetitle></ulink></entry></row>
<row><entry>Value: 8</entry><entry>CHR</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/SimpleValue.html"><citetitle>Bio::Annotation::SimpleValue</citetitle></ulink></entry></row>
<row><entry>Direct database link to NP_000671 in database RefSeq</entry><entry>dblink</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/DBLink.html"><citetitle>Bio::Annotation::DBLink</citetitle></ulink></entry></row>
<row><entry>Direct database link to SGC35558 in database STS</entry><entry>dblink</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/DBLink.html"><citetitle>Bio::Annotation::DBLink</citetitle></ulink></entry></row>
<row><entry>Comment: Summary: Alpha-1-ARs are members of the GPCR superfamily</entry><entry>comment</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/Comment.html"><citetitle>Bio::Annotation::Comment</citetitle></ulink></entry></row>
<row><entry>Value: adrenergic, alpha-1A-, receptor</entry><entry>OFFICIAL_GENE_NAME</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/SimpleValue.html"><citetitle>Bio::Annotation::SimpleValue</citetitle></ulink></entry></row>
<row><entry>Value: ADRA1C</entry><entry>ALIAS_SYMBOL</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/SimpleValue.html"><citetitle>Bio::Annotation::SimpleValue</citetitle></ulink></entry></row>
<row><entry>Value: adrenergic, alpha -1A-, receptor</entry><entry>ALIAS_PROT</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/SimpleValue.html"><citetitle>Bio::Annotation::SimpleValue</citetitle></ulink></entry></row>
<row><entry>Direct database link to NM_000680 in database RefSeq</entry><entry>dblink</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/DBLink.html"><citetitle>Bio::Annotation::DBLink</citetitle></ulink></entry></row>
<row><entry>Value: ADRA1A</entry><entry>OFFICIAL_SYMBOL</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/SimpleValue.html"><citetitle>Bio::Annotation::SimpleValue</citetitle></ulink></entry></row>
<row><entry>Direct database link to SGC35557 in database STS</entry><entry>dblink</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/DBLink.html"><citetitle>Bio::Annotation::DBLink</citetitle></ulink></entry></row>
<row><entry>Value: 8p21-p11.2</entry><entry>MAP</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/SimpleValue.html"><citetitle>Bio::Annotation::SimpleValue</citetitle></ulink></entry></row>
<row><entry>Direct database link to 104221 in database MIM</entry><entry>dblink</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/DBLink.html"><citetitle>Bio::Annotation::DBLink</citetitle></ulink></entry></row>
<row><entry>Direct database link to D8S2033 in database STS</entry><entry>dblink</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/DBLink.html"><citetitle>Bio::Annotation::DBLink</citetitle></ulink></entry></row>
<row><entry>Direct database link to none in database GenBank</entry><entry>dblink</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/DBLink.html"><citetitle>Bio::Annotation::DBLink</citetitle></ulink></entry></row>
<row><entry>cellular component|integral to plasma membrane|GO:0005887</entry><entry>cellular
 component</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/OntologyTerm.html"><citetitle>Bio::Annotation::OntologyTerm</citetitle></ulink></entry></row>
<row><entry>Direct database link to Hs.52931 in database UniGene</entry><entry>dblink</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/DBLink.html"><citetitle>Bio::Annotation::DBLink</citetitle></ulink></entry></row>
<row><entry>Direct database link to M11313 in database GenBank</entry><entry>dblink</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/DBLink.html"><citetitle>Bio::Annotation::DBLink</citetitle></ulink></entry></row>
<row><entry>Direct database link to P35348 in database GenBank</entry><entry>dblink</entry><entry><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/DBLink.html"><citetitle>Bio::Annotation::DBLink</citetitle></ulink></entry></row>
			 </tbody>
		  </tgroup>
      </table>
    </para>
    <para>
      The output from the script shows that Locuslink Annotations
      come in a variety of types, including DBLink, OntologyTerm, 
      Comment, and SimpleValue. In order to extract the exact value
      you want, as opposed to the one returned by the
      <function>as_text</function> method,
      you'll need to find the desired method in the documentation for the 
      Annotation in question.
    </para>
    <para>
      If you were only interested in a certain type of Annotation
      you could retrieve it efficently with something like this:
	 </para>
    <para>
      <programlisting>
           @term_annotations = map { $_->isa("Bio::Ontology::TermI"); } 
                      $seq_object->get_Annotations();
      </programlisting>
    </para>
	 <para></para>
    <para>
      To completely parse these sequence formats you may also need to 
      use methods that don't have anything to do with Features or 
      Annotations per se. For example, the
      <function>display_id</function> method returns 
      the LOCUS name of a Genbank entry or the ID from a SwissProt
      file. The <function>desc()</function> method will return 
      the DEFINITION line of a Genbank file or the DE field in a 
      SwissProt file. Again, this is a situation where you may have to 
      examine a module, probably a SeqIO::* module, to find out more 
      of the details.
    </para>
  </section>

  <section id="annotation">
        <title>Building your own sequences</title>
    <para>
      We've taken a look at getting data from SeqFeature and Annotation
      objects, but what about creating these objects when you
      already have the data? The
      <ulink
	url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Generic.html"><citetitle>Bio::SeqFeature::Generic</citetitle></ulink> object is 
      probably the best SeqFeature object for this purpose, in part because of
      its flexibility. Let's assume we have a sequence that has an
      interesting sub-sequence, going from position 10 to 22.
    </para>
	 <para></para>
    <para>
      <programlisting>
	use Bio::SeqFeature::Generic;

	# create the feature with some data, evidence and a note
	my $feat = new Bio::SeqFeature::Generic(-start  => 10,
	                                        -end    => 22,
					        -strand => 1,
					        -tag    => {evidence => 'predicted',
						            note   => 'TATA box' } );
	</programlisting>
    </para>
	 <para></para>
    <para>
      The <ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Generic.html"><citetitle>SeqFeature::Generic</citetitle></ulink> object offers the user a "tag system" for
      addition of data that's not explicitly accounted for by its
      methods, that's what the "-tag" is for, above.
      If you want to add your own custom data to a feature you could
      use the "-tag" tag or you could add values after the object has 
      been created:
    </para>
    <para>
      <programlisting>
	$feat->add_tag_value("match1","PF000123 e-7.2");
	$feat->add_tag_value("match2","PF002534 e-3.1");
	
	my @arr = $feat->get_all_tags;
	for my $tag (@arr) {
	  print $tag,":",$feat->get_tag_values($tag),"  ";
	}
        # prints out:
	# author:john  match1:PF000123 e-7.2  match2:PF002534 e-3.1  note:TATA box
      </programlisting>
    </para>
    <para>
    </para>
    <para>
      Since the value passed to "-tag" could be any kind of scalar,
      like a reference, it's clear that this approach should be able
      handle just about any sort of data.
    </para>
    <para>
      Once the feature is created it can be associated with our sequence:
    </para>
    <para>
      <programlisting>
	use Bio::Seq;

	# create a simple Sequence object
	my $seq_obj = Bio::Seq->new(-seq => "attcccccttataaaattttttttttgaggggtggg",
                                    -display_id => "BIO52" );
	# then add the feature we've created to the sequence
	$seq_obj->add_SeqFeature($feat);
      </programlisting>
    </para>
	 <para></para>
    <para>
      The <function>add_SeqFeature()</function> method will also accept an array
      of SeqFeature objects.
    </para>
    <para>
      What if you wanted to add an Annotation to a sequence?
      You'll create the Annotation object, add data to it, create an
      AnnotationCollection object, add the Annotation to
      the AnnotationCollection along with a tag, and then add the 
      AnnotationCollection to the sequence object:  
    </para>
    <para>
      <programlisting>
	use Bio::Annotation::Collection;
	use Bio::Annotation::Comment;

	my $comment = Bio::Annotation::Comment->new;
	$comment->text("This looks like a good TATA box");
	my $coll = new Bio::Annotation::Collection;
	$coll->add_Annotation('comment',$comment);
	$seq_obj->annotation($coll);
      </programlisting>
    </para>
	 <para></para>
    <para>
      Now let's examine what we've created by writing the contents of
      <varname>$seq_obj</varname> to a Genbank file called "test.gb":
    </para>
    <para>
      <programlisting>
	use Bio::SeqIO;

	my $io = Bio::SeqIO->new(-format => "genbank",
	                         -file   => ">test.gb" );
	$io->write_seq($seq_obj);
      </programlisting>
    </para>
	 <para></para>
    <para>
      Voila!
    </para>
    <para>
      <programlisting>
LOCUS       BIO52                    36 bp    dna     linear   UNK
DEFINITION
ACCESSION   unknown
COMMENT     This looks like a good TATA box
FEATURES             Location/Qualifiers
                     10..22
                     /match2="PF002534 e-3.1"
                     /match1="PF000123 e-7.2"
                     /author="john"
                     /note="TATA box"
BASE COUNT        7 a      5 c      8 g     16 t
ORIGIN
        1 attccccctt ataaaatttt ttttttgagg ggtggg
//	  
      </programlisting>
    </para>
  </section>



  <section id="in_addition">
    <title>Additional Information</title>
    <para>
      If you would like to learn about representing sequences and 
      features in graphical form take a look at the <ulink 
      url="http://bioperl.org/HOWTOs/html/Graphics-HOWTO.html"><citetitle>Graphics
      HOWTO</citetitle></ulink>. The documentation for each of the individual
      SeqFeature, Range, Location and 
      Annotation modules is also very useful, here's a list of them. 
      If you have questions 
      or comments that aren't addressed herein then write the 
      Bioperl community at bioperl-l@bioperl.org.
    </para>
    <para>
      <emphasis>SeqFeature Modules</emphasis>
      <simplelist type="horiz" columns="1">
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeatureI.html"><citetitle>SeqFeatureI.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/AnnotationAdaptor.html"><citetitle>SeqFeature/AnnotationAdaptor.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/FeaturePair.html"><citetitle>SeqFeature/FeaturePair.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Similarity.html"><citetitle>SeqFeature/Similarity.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Generic.html"><citetitle>SeqFeature/Generic.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/SimilarityPair.html"><citetitle>SeqFeature/SimilarityPair.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/PositionProxy.html"><citetitle>SeqFeature/PositionProxy.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Computation.html"><citetitle>SeqFeature/Computation.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Primer.html"><citetitle>SeqFeature/Primer.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Collection.html"><citetitle>SeqFeature/Collection.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/CollectionI.html"><citetitle>SeqFeature/CollectionI.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/SiRNA/Pair.html"><citetitle>SeqFeature/SiRNA/Pair.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/SiRNA/Oligo.html"><citetitle>SeqFeature/SiRNA/Oligo.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Gene/GeneStructure.html"><citetitle>SeqFeature/Gene/GeneStructure.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Gene/NC_Feature.html"><citetitle>SeqFeature/Gene/NC_Feature.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Gene/Transcript.html"><citetitle>SeqFeature/Gene/Transcript.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Gene/Exon.html"><citetitle>SeqFeature/Gene/Exon.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Gene/GeneStructureI.html"><citetitle>SeqFeature/Gene/GeneStructureI.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Gene/Poly_A_site.html"><citetitle>SeqFeature/Gene/Poly_A_site.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Gene/TranscriptI.html"><citetitle>SeqFeature/Gene/TranscriptI.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Gene/ExonI.html"><citetitle>SeqFeature/Gene/ExonI.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Gene/Intron.html"><citetitle>SeqFeature/Gene/Intron.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Gene/Promoter.html"><citetitle>SeqFeature/Gene/Promoter.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Gene/UTR.html"><citetitle>SeqFeature/Gene/UTR.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Tools/Unflattener.html"><citetitle>SeqFeature/Tools/Unflattener.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/SeqFeature/Tools/TypeMapper.html"><citetitle>SeqFeature/Tools/TypeMapper.pm</citetitle></ulink></member>
      </simplelist>
    </para>
    <para>
      <emphasis>Annotation Modules</emphasis>
      <simplelist type="horiz" columns="1">
	<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/AnnotationI.html"><citetitle>AnnotationI.pm</citetitle></ulink></member>  
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/AnnotatableI.html"><citetitle>AnnotatableI.pm</citetitle></ulink></member>  
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/AnnotationCollectionI.html"><citetitle>AnnotationCollectionI.pm</citetitle></ulink></member>  
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/AnnotationFactory.html"><citetitle>Annotation/AnnotationFactory.pm</citetitle></ulink></member>  
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/Comment.html"><citetitle>Annotation/Comment.pm</citetitle></ulink></member>       
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/Reference.html"><citetitle>Annotation/Reference.pm</citetitle></ulink></member>        
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/TypeManager.html"><citetitle>Annotation/TypeManager.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/DBLink.html"><citetitle>Annotation/DBLink.pm</citetitle></ulink></member>        
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/SimpleValue.html"><citetitle>Annotation/SimpleValue.pm</citetitle></ulink></member>
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/Collection.html"><citetitle>Annotation/Collection.pm</citetitle></ulink></member>         
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/OntologyTerm.html"><citetitle>Annotation/OntologyTerm.pm</citetitle></ulink></member>  
<member><ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Annotation/StructuredValue.html"><citetitle>Annotation/StructuredValue.pm</citetitle></ulink></member>
      </simplelist>
    </para>
    <para>
      <emphasis>Location Modules</emphasis>
      <simplelist type="horiz" columns="1">
	<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/LocationI.html"><citetitle>LocationI.pm</citetitle></ulink></member>
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/LocatableSeq.html"><citetitle>LocatableSeq.pm</citetitle></ulink></member>
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Location/Atomic.html"><citetitle>Location/Atomic.pm</citetitle></ulink></member>
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Location/AvWithinCoordPolicy.html"><citetitle>Location/AvWithinCoordPolicy.pm</citetitle></ulink></member>
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Location/CoordinatePolicyI.html"><citetitle>Location/CoordinatePolicyI.pm</citetitle></ulink></member>
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Location/Fuzzy.html"><citetitle>Location/Fuzzy.pm</citetitle></ulink></member>
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Location/FuzzyLocationI.html"><citetitle>Location/FuzzyLocationI.pm</citetitle></ulink></member>
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Location/NarrowestCoordPolicy.html"><citetitle>Location/NarrowestCoordPolicy.pm</citetitle></ulink></member>
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Location/Simple.html"><citetitle>Location/Simple.pm</citetitle></ulink></member>
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Location/Split.html"><citetitle>Location/Split.pm</citetitle></ulink></member>
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Location/SplitLocationI.html"><citetitle>Location/SplitLocationI.pm</citetitle></ulink></member>
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Location/WidestCoordPolicy.html"><citetitle>Location/WidestCoordPolicy.pm</citetitle></ulink></member>
      </simplelist>
    </para>
    <para>
<emphasis>Range Modules</emphasis>
      <simplelist type="horiz" columns="1">
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/RangeI.html"><citetitle>RangeI.pm</citetitle></ulink></member>
<member><ulink
	    url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Range.html"><citetitle>Range.pm</citetitle></ulink></member>
      </simplelist>
    </para>
  </section>

  <section id="acknowledgements">
    <title>Acknowledgements</title>
    <para>
      Thanks to Steven Lembark for comments and neat code discussions.
    </para>
  </section>

</article>

