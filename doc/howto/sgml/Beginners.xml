<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "./docbookx.dtd"
  [
    <!ENTITY % global.entities SYSTEM "./global.xml">
    %global.entities;

    <!ENTITY % entities SYSTEM "entities.xml">
    %entities;
  ]
>

<article lang="en">
  <articleinfo>
    <title>Beginners HOWTO</title>
    <author>
      <!-- 
		one of (CONTRIB AUTHORBLURB AFFILIATION OTHERNAME 
		LINEAGE SURNAME FIRSTNAME HONORIFIC) 
		-->
      <firstname>Brian</firstname>
      <surname>Osborne</surname>
      <authorblurb>
		  <para>Bioperl contributor</para>
      </authorblurb>
      <affiliation>
		  <orgname>
			 <ulink url="http://www.cognia.com">Cognia
				Corporation</ulink>
		  </orgname>
		  <address>
			 <email>brian-at-cognia.com</email>
        </address>
      </affiliation>
    </author>
    <pubdate>2004-12-14</pubdate>
<!--
    <revhistory>
      <revision>
		  <revnumber></revnumber>
		  <date></date>
		  <authorinitials></authorinitials>
		  <revremark></revremark>
      </revision>
    </revhistory>
-->    
	 <legalnotice>
      <para>
		  This document is copyright Brian Osborne, 2004.  For
		  reproduction other than personal use please contact 
		  brian at cognia.com.
      </para>      
    </legalnotice>
    
    <abstract>
      <para>
		  This is a HOWTO written in DocBook (SGML) that talks about using
		  Bioperl, for biologists who would like to learn more
		  about writing their own bioinformatics scripts using Bioperl. 
      </para>
    </abstract>
  </articleinfo>
  
  <section id="introduction">
    <title>Introduction</title>
    <para>
		If you're a molecular biologist of some sort it's likely that
		you're interested in gene and protein sequences, and you study them
		in some way on a regular basis. Perhaps you'd like to try your
		hand at automating some of these tasks, or you're just curious
		about learning more about the programming side of bioinformatics.
		In this HOWTO you'll see discussion of some of the common tasks, 
		like sequence analysis with BLAST, retrieving sequences from 
		public databases, and making alignments. You'll also see how to
		write Bioperl scripts that chain these tasks together, that's
		how you're able to do really powerful things with Bioperl.
    </para>
    <para>
		You will also see some discussions of software concepts, it
		can't be avoided, and the more you understand about
		programming the better. All efforts will be made
		not to introduce too much unfamiliar material but 
		there is an introducton to modularity, or objects. This is 
		one of the aspects of the Bioperl package that you'll have
		to come to grips with as you attempt more complex tasks with
		your scripts.
    </para>
    <note>
      <para>
		  This HOWTO does not discuss a very nice module that's designed for
		  beginners, 
		  <ulink url="http://doc.bioperl.org/releases/bioperl-1.4/Bio/Perl">Bio::Perl</ulink>. The reason is that though this is an
			 excellent introductory tool, it can't be extended. What's
		  attempted here is both an introduction and suggestions on
		  ways to expand your new-found skills.
      </para>
    </note>
  </section>

  
  <section id="installation">
    <title>Installing Bioperl</title>
    <para>
		The first thing to determine is the Bioperl platform - Unix or
		Windows? Here are some things to consider, if you're choosing 
		between the two.
	 </para>
	 <para>
		<emphasis>Unix Advantages</emphasis>
		<simplelist type="horiz" columns="1">
		  <member>
			 Knowing some Unix is a useful skill. No matter how prevalent 
			 Windows is on the desktop, Unix rules bioinformatics.
		  </member>
		  <member>
			 Unix isn't as hard as you may think, if you know less than
			 10 commands you're ready to work.
		  </member>
		  <member>
			 Every bioinformatics application you've ever heard of runs on Unix.
		  </member>
		  <member>
			 If you want to do serious computation the typical Unix server is
			 probably more stable and more powerful than the 
			 available Windows machine.
		  </member>
		  <member>
			 There's an administrator taking care of the machine - maybe
			 she'll even install Bioperl for you! Ask and see.
		  </member>
		</simplelist>
	 </para>
	 <para>
		<emphasis>Unix Disadvantages</emphasis>
		<simplelist type="horiz" columns="1">
		  <member>
			 The command-line can seem unfamiliar and awkward at first.
		  </member>
		  <member>
			 Your Unix account may be on a server - not too portable!
		  </member>
		  <member>
			 You won't have easy access to all your familiar programs.
		  </member>
		  <member>
			 You'll probably have to learn to use a Unix word processor,
			 like emacs or vi.
		  </member>
		  <member>
			 You won't have control of the machine, the administrator
			 will. You may not be able to download all of Genbank,
			 for example!
		  </member>
		</simplelist>
	 </para>
	 <para>
		<emphasis>Windows Advantages</emphasis>
		<simplelist type="horiz" columns="1">
		  <member>
			 Simplicity, if Windows is what you're working with now.
		  </member>
		  <member>
			 Plenty of Bioperl users run it on Windows.
		  </member>
		</simplelist>
	 </para>
	 <para>
		<emphasis>Windows Disdvantages</emphasis>
		<simplelist type="horiz" columns="1">
		  <member>
			 Not all bioinformatics applications run on Windows.
		  </member>
		  <member>
			 It's your computer, you will have to deal with the installation details
			 yourself.
		  </member>
		</simplelist>
	 </para>
    <para>
		<tip>
		  If you decide to use Unix there are many Web pages that can 
		  give you a good introduction, google "introduction unix" to
		  see more than a few.
		</tip>
    </para>
    <para>
		The instructions for Unix and Windows installations are found
		on the <ulink url="http://bioperl.org/Core/Latest/index.shtml">download page</ulink>.
		If you do run into problems then mail bioperl-l@bioperl.org,
		this is the main mailing list, installation issues are
		frequently discussed.
	 </para>
  </section>
  
  <section id="help">
    <title>Getting Assistance</title>
    <para>
		People will run into problems installing Bioperl or writing 
		scripts using Bioperl, nothing unusual about that. If you need 
		assistance the way to get it is to mail bioperl-l@bioperl.org.
		There are a good number of helpful people who regularly read
		this list and if you want their advice it's best to give
		sufficent detail. Your letter should probably include:
		<simplelist type="horiz" columns="1">
		  <member>
			 The version of Bioperl you're working with. 
		  </member>
		  <member>
			 The platform or operating system you're using. 
			 </member>
		  <member>
			 What you are trying to do.
		  </member>
		  <member>
			 The script you're writing, if you're writing a script.
		  </member>
		  <member>
			 Any error messages you saw.
		  </member>
		</simplelist>
    </para>    
    <para>
		Every once in a while a message will appear in bioperl-l coming from someone
		in distress that goes unanswered. The explanation is simple:
		the person neglected to include 1 or more of the details above,
		usually the script or the error messages. If you give enough 
		information you'll always get help.
    </para>
  </section>

  <section id="perl">
    <title>Perl Itself</title>
    <para>
		Perhaps you're already know a little Perl, or 
		have started to study it. If you haven't, here are a few books 
		you could look at:
	 </para>
    <para>
		<simplelist type="horiz" columns="2">
		  <member>
		  </member>
		</simplelist>
    </para>
    <para>
      <programlisting>
      </programlisting>
    </para>
    <para>
    </para>
    <para>
    </para>
    <para>
      <programlisting>
      </programlisting>
    </para>
  </section>


  <section id="starting">
	 <title>Starting to write a script on Unix</title>
	 <para>
		Sometimes the trickiest part is this step, writing something and
		getting it to run. Windows and Unix are slightly different, let's
		address them separately.
	 </para>
	 <para>
		In Unix when you're ready to work you're usually in the
		command-line or "shell" environment. People have their own
		choices as to shell, usually bash or tcsh, sometimes zsh, csh,
		and so on. First find out Perl's version by typing:
	 </para>		
	 <para>
		<programlisting>
		  >perl -v
		</programlisting>
	 </para>
	 <para>
		You will see something like:
	 </para>
	 <para>
		<programlisting>
This is perl, v5.8.2 built for cygwin-thread-multi-64int

Copyright 1987-2003, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using `man perl' or `perldoc perl'.  If you have access to the
Internet, point your browser at http://www.perl.com/, the Perl Home Page.
		</programlisting>
	 </para>
	 <para>
		Hopefully you're using Perl version 5.4 or higher, earlier
		versions may be troublesome. Now let's find out where the Perl 
		program is located:
	 </para>	
	 <para>
		<programlisting>
			 >which perl
		</programlisting>
	 </para>
	 This will give you something like:
	 <para>
		<programlisting>
		  >/bin/perl
		</programlisting>
	 </para>
	 <para>
		Now that we know where Perl is located we're ready to write a
		script, and line 1 of the script will specify this location.
		You're probably using some Unix word processor, emacs or vi,
		for example  (nano or pico are other possible choices,
		very easy to use, but not found on all Unix machines unfortunately).
		Start to write your script by entering something like:
	 </para>
	 <para>
		<programlisting>
		  >emacs seqio.pl
		</programlisting>
	 </para>
	 And make this the first line:
	 <para>
		<programlisting>
		  #!/bin/perl -w
		</programlisting>
	 </para>
	 <para>
		The "-w" flag tells Perl to warn you if various common errors
		are encountered.
	 </para>
  </section>

  <section id="retrieving_gb">
	 <title>Retrieving a sequence from a remote database</title>
	 <para>
		One of the strengths of Bioperl is that it allows you to retrieve
		sequences from all sorts of sources, files, remote databases,
		local databases, regardless of their format. Let's use this 
		capability to get a entry from Genbank. With this entry
		we'll be able to create a local file, search the entry's
		sequence with a motif, and examine its names and identifiers,
		amongst other things. 
	 </para>
	 <para>
		In order to use this, or any other Perl module, you need to
		instruct Perl explicitly. This will be your next line:
	 </para>
	 <para>
		<programlisting>
		  use Bio::DB::GenBank;
		</programlisting>
	 </para>
	 <para>
		We could also query SwissProt, GenPept, EMBL, or RefSeq in an 
		analogous fashion.
	 </para>
	 
  </section>

  <section id="retrieving_gb">
	 <title>Retrieving a sequence from a file<title>
		  <para>
			 Furthermore, the 
			 syntax used to retrieve these sequences is fairly uniform,
			 since a single class or module does all the work for you. This
			 module is <classname>Bio::SeqIO</classname>, where IO stands for 
			 <emphasis>I</emphasis>nput-<emphasis>O</emphasis>utput.
		  </para>

		  <para>
			 A common beginner's mistake is to choose to not use
			 <classname>Bio::SeqIO</classname>. This is understandable, as you
			 may have read about Perl's <function>open</function>
			 function, and Bioperl's way of retrieving sequences looks odd
			 and overly complicated, at first. But don't use
			 <function>open()</function>! Using <function>open</function> 
			 immediately forces you to do the parsing of the sequence
			 file and this can get complicated very quickly. Trust
			 SeqIO, it's built to open and inter-convert all
			 the common sequence formats, it can read and write to files,
			 and it's built to operate with all the other Bioperl 
			 modules that you will want to use. 
		  </para>

                  <para>
                         Once you've decided to read a sequence (or multiple sequences) from
                         a file, you should include the following line in your program:
                  </para>

                  <para>
                           <programlisting>
                              use Bio::SeqIO;
                           </programlisting>
                  </para>

                  <para>
                         This tells Perl that you'd like to make use of the
                         functions and objects defined defined in the
                         Bio::SeqIO module. "Using" Bio::SeqIO in this manner
                         will allow input and output from all of the sequence
                         file formats supported by Bioperl.
                  </para>

                  <para>
                         Now that we've told Perl to use the Bio::SeqIO module,
                         we should make use of it. The following line creates a
                         Bio::SeqIO object:
                  </para>
                            <programlisting>
                               my $seqio = Bio::SeqIO->new( -file => 'sequence.fasta', -format => 'fasta' );
                            </programlisting>
                  </para>

                  <para>
                         This line does several things:
                        <simplelist type="horiz" columns="1">
                           <member>
                              The word "my" tells the Perl interpreter that this is the
                              first time that the variable $seqio has been used, and it
                              also defines the scope of $seqio. Writing "my" before the
                              first use of a variable is a requirement when "using strict."
                           </member>
                           <member>
                              The new method of the Bio::SeqIO module is called. This method
                              is used to construct and return a new Bio::SeqIO object.
                           </member>
                           <member>
                              This method is passed two arguments: a file value "seq.fasta" and
                              a format value of "fasta". These arguments tell Bio::SeqIO that
                              $seqio will read sequence information from a file named seq.fasta
                              that is stored in the FASTA sequence file format.
                           </member>
                           <member>
                              The object returned by the "new" method is assigned to the scalar
                              variable $seqio. 
                           </member>
                        </simplelist>
                  </para>

                  


  </section>


  <section id="regexp">
    <title>Regular Expressions</title>
    <para>
    </para>
    <para>
    </para>
    <para>
    </para>
    <para>
    </para>
    <para>
      <important>
      </important>
    </para>
  </section>

  <section id="blast">
    <title>BLAST</title>
    <para>
      <programlisting>
my $seq_in  = Bio::SeqIO->new( -format => 'fasta',
                               -file   => $string);

while( my $seq = $seq_in->next_seq() ) {
  my $factory = Bio::Tools::Run::StandAloneBlast->new(
		  outfile => $seq->display_id . ".blastn",
		  program => 'blastn' );
  my $bl2seq_report = $factory->bl2seq( 'ketosintaza-dna', $seq);
}
      </programlisting>
    </para>
  </section>

  <section id="">
    <title></title>
    <para>
    </para>
    <para>
		<table>
		  <title></title>
		  <tgroup cols="3">
			 <thead>
				<row>
				  <entry></entry>
				  <entry></entry>
				  <entry></entry>
				</row>
			 </thead>
			 <tbody>
				<row>
				  <entry></entry>
				  <entry></entry>
				  <entry></entry>
				</row>
			 </tbody>
		  </tgroup>
      </table>
    </para>
  </section>

  <section id="">
	 <title></title>
    <para>
    </para>	
    <para>
    </para>
    <para>
    </para>
    <para>
      <important>
		  <para>
		  </para>
      </important>
    </para>
    <para>
      <programlisting>
      </programlisting>
    </para>
    <para>
	 </para>
  </section>

  <section id="">
    <title></title>
    <para>
	 </para>
    <para>
      <programlisting>
      </programlisting>
    </para>
    <para>
	 </para>
    <para>
      <programlisting>
      </programlisting>
    </para>
    <para>
	 </para>
  </section>
  
  <section id="perldoc">
	 <title>Appendix I: Perl's Documentation System</title>
	 <para>
		Documentation for Perl is written using a system known as POD, which
		stands for "Plain Old Documentation." You can access Perl's built-in
		documentation by using the "perldoc" command. To view information 
		on how to use perldoc, type the following at the command line:
		<programlisting>
		  >perldoc perldoc
		</programlisting>
	 </para>
  
	 <para>
		Bioperl is also documented using POD, and perldoc can be an easy way to
		obtain usage information on any of the Bioperl modules:
		<programlisting>
		  >perldoc Bio::SeqIO
		</programlisting>
	 </para>
  
	 <para>
		Perldoc is a very useful and versatile tool, shown below are some more
		examples on how to use perldoc:
	 </para>
  
	 <para>
		Read about Perl's built-in "print" function:
		<programlisting>
		  >perldoc -f print
		</programlisting>
	 </para>
  </section> 

  <section id="objects">
	 <title>Appendix II: The Basics of Perl Objects<title>
            <para>
               Object-oriented programming (OOP) is software engineering
               technique for modularizing code. The difference between
               object-oriented programming and procedural programming can be
               simply illustrated.
            </para>

            <para>
               <emphasis>A Simple Example</emphasis>
               Assume that we have a DNA sequence stored in the scalar variable
               $sequence. We'd like to generate the reverse complement of this 
               sequence and store it in $reverse_complement. Shown below is the
               procedural Perl technique of using a subroutine to operate on
               this scalar data:
            </para>
            Example 1: 
               <programlisting>
                  my $reverse_complement = &rev_com( $sequence );
               </programlisting>
            </para>

            <para>
               The hallmark of a procedural program is that data and functions to
               operate on that data are kept separate. In order to generate the reverse
               complement of a DNA sequence, we need to call a function that operates
               on that DNA sequence.
            </para>
               
            <para>
               Shown below is the object-oriented way of generating the reverse 
               complement of a DNA sequence:
            </para>

            <para>
            Example 2:
               <programlisting>
                  my $reverse_complement = $sequence->revcom;
               </programlisting>
            </para>

            <para>
               The main difference between this object-oriented example and the
               procedural example shown before is that the function for
               generating the reverse complement (called "revcom") part of
               $sequence. To put it another way, $sequence knows how to calculate
               and return its reverse complement. Encapsaluting both data and
               functions into the same construct is the fundamental idea behind
               object-oriented programming. 
            </para>

            <para>
               <emphasis>Terminology</emphasis>
               In the object-oriented example above, $sequence is called an
               object, and the function "revcom" is called a method. An object
               is a data structure that has both data and methods associated
               with it. Objects are separated into types called classes, and the
               class of an object defines both the data that it can hold and the 
               methods that it knows.
            </para>

            <para>
               <emphasis>A Bioperl Example</emphasis>
               
            </para>

  </section>
</article>

<!--
  <section id="read_seq"> 
     <title>Simple Example: Reading in a Sequence<title>
         <para>
            Shown below is a simple program for reading in a set of biological
            sequences from a file. 
         </para>
         
         <para>
            <programlisting>
               1   #!/usr/bin/perl
               2
               3   use strict;
               4   use Bio::SeqIO;
               5
               6   my $seqio = Bio::SeqIO->new( -file   => 'seq.fasta',
               7                                -format => 'fasta' );
         
            </programlisting>
         </para>

         <para>
            Let's dissect this example line-by-line. Line one defines the path to
            the Perl interpreter (/usr/bin/perl), which is called when the program
            is executed. While not absolutely necessary (especially on a Windows
            machine), it's a good practice to this line to ensure that programs
            will run on a Unix machine. This line is sometimes referred to as the
            "shebang". Line three tells the Perl interpreter to be strict when
            running this program, and to print informative diagnostic messages
            when it encounters a potential error. While not absolutely necessary,
            lines 1-3 are included at the beginning of most Perl programs.
         </para>

         <para>
            Line 4 tells the Perl interpreter to "use the Bio::SeqIO module." While
            this is an over-simplified explanation of what's actually happening,
            it will suffice for now. Lines 6-7 will require a lot of explanation:
            <simplelist type="horiz" columns="1">
               <member>
                  The new method of the Bio::SeqIO module is called. This method
                  is used to construct and return a new Bio::SeqIO object.
               </member>
               <member>
                  This method is passed two arguments: a file value "seq.fasta" and
                  a format value of "fasta". These arguments tell Bio::SeqIO that
                  $seqio will read sequence information from a file named seq.fasta
                  that is stored in the FASTA sequence file format.
               </member>
               <member>
                  The object returned by the "new" method is assigned to the scalar
                  variable $seqio. 
               </member>
               <member>
                  The word "my" tells the Perl interpreter that this is the
                  first time that the variable $seqio has been used, and it
                  also defines the scope of $seqio. Writing "my" before the
                  first use of a variable is a requirement when "using strict."
               </member>
            </simplelist>
               
            The "new" method called in line 6 is called the <emphasis>constructor</emphasis>
            of Bio::SeqIO, as it is used to construct Bio::SeqIO objects.
         </para>

         <para>
            After executing line 7 of the program listed above, Perl has created a Bio::SeqIO
            object named $seqio that will read from a FASTA-formatted file named seq.fasta.
            At this point, the program isn't very impressive, but adding more functionality 
            is not very difficult.
         </para>
    
  </section>

-->
